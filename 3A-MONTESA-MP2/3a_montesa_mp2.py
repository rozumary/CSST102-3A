# -*- coding: utf-8 -*-
"""3A-MONTESA-MP2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16g2SeUZfWHIqf5dyIs-wdzlHnFdNQe2c

#Machine Problem No. 2: Predicting House Prices with Multiple Regression

Problem Statement: You are a data scientist working for a real estate company. Your task is to develop a
predictive model that can estimate the prices of houses in a particular city. The dataset provided includes
multiple features, such as the size of the house (in square feet), the number of bedrooms, the age of the
house, the proximity to downtown (in miles), and the house price. Your goal is to build a multiple
regression model that can accurately predict house prices based on these features.

#1. Data Preprocessing

*Importing libraries*
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection  import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import MinMaxScaler

"""*Loading the dataset*"""

house_cost = pd.read_csv('datasets_house_prices.csv')

"""*Checking the missing values*"""

print ('Missing values in each column')
print (house_cost.isnull().sum())

"""*Normalizing features*"""

features = house_cost[['Size (sqft)', 'Bedrooms', 'Age', 'Proximity to Downtown (miles)']]
target = house_cost['Price']

features.head()

"""#2. Model Implementation"""

scaler = MinMaxScaler()

features_normalized = scaler.fit_transform(features)

features_normalized_df = pd.DataFrame(features_normalized, columns=features.columns)

features_normalized_df.head()

"""*Implement linear regression model*"""

X = np.c_[np.ones(features_normalized.shape[0]), features_normalized]
y = target.values

"""*Model Parameters*"""

def least_squares(X,y):
  theta = np.linalg.inv(X.T.dot(X)).dot(X.T).dot(y)
  return theta

theta = least_squares(X,y)

print("Model parameters(Theta):", theta)

"""*Function that predict houses based on input features*"""

def predict (X, theta):
  return np.dot(X, theta)

  predicted_prices = predict(X, theta)

  for i in range (5):
    print(f"Predicted price: {predicted_prices[i]:.2f}, Actual price: {y[i]:.2f}")

"""#3. Model Training

*Split dataset*
"""

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state=42)
print(f"Training set size: {len(X_train)}, Testing set size:{len(X_test)}")

"""*Train the linear regression model*"""

theta_train = least_squares (X_train, y_train)

y_train_pred = predict(X_train, theta_train)
y_test_pred = predict(X_test, theta_train)

"""*Calculating the Mean Squared Error (MSE)*"""

mse_train = np.mean((y_train_pred - y_train)**2)
print(f"Training MSE:{mse_train}")

mse_test = np.mean((y_test_pred - y_test)** 2)
print(f"Test MSE:{mse_test}")

"""#4. Model Evaluation"""

y_train_pred = predict(X_train, theta_train)
y_test_pred = predict(X_test, theta_train)

"""*Visualization for regression model*"""

plt.scatter(y_test, y_test_pred, color='blue', label='Predicted vs Actual')
plt.xlabel("Actual Prices")
plt.ylabel("Predicted Prices")
plt.title("Actual vs Predicted House Prices")

plt.plot([min(y_test), max(y_test)], [min(y_test), max(y_test)], color='orange', label='Perfect Prediction')

plt.legend()

plt.show()